#!/usr/bin/env node --harmony

'use strict'

var _exec = require('child_process').exec
var _spawn = require('child_process').spawn

var fs = require('fs')
var co = require('co')
var minimist = require('minimist')
var util = require('util')
var path = require('path')
var strftime = require('strftime')
var semver = require('semver')
var chalk = require('chalk')


var argv = minimist(process.argv.slice(2), {
  alias: {
    m: 'message',
    d: 'dryrun',
    h: 'help'
  },
  boolean: true
})


function _run(command, opts) {
  return new Promise(function(resolve, reject) {
    _exec(command, opts, function(err, output, errput) {
      if (err) {
        reject(new Error(errput))
      } else {
        resolve(output)
      }
    })
  })
}

function _spawnAsync(command, args, opts) {
  return new Promise(function(resolve, reject) {
    var proc = _spawn(command, args, opts)
    var output = ''
    var errput = ''

    if (opts.stdio !== 'inherit') {
      proc.stdout.on('data', chunk => { output += chunk })
      proc.stderr.on('data', chunk => { errput += chunk })
    }

    proc.on('exit', function(code) {
      if (code === 0) {
        resolve(output)
      } else {
        reject(new Error(errput))
      }
    })
  })
}


function escapeArg(str) {
  return /[ "']/.test(str) ? JSON.stringify(str) : str
}

function run(command, opts) {
  return execute(command, opts)
}

function spawn(command, args, opts) {
  return execute(command, args, opts)
}

function execute(command, args, opts) {
  console.log(chalk.cyan('     $'), command, args ? args.map(escapeArg).join(' ') : '')

  if (argv.dryrun) {
    return Promise.resolve()
  }

  return (arguments.length > 2
    ? _spawnAsync(command, args, opts)
    : _run(command, args)
  )
    .catch(dryrun)
}

function dryrun(err) {
  console.error(chalk.yellow(err.stack))
  console.error('')
  console.error(chalk.cyan('  Tip:'),
    'Please run the rest commands manually after solving this issue.'
  )
  argv.dryrun = true
}


function readFile(fpath, encoding) {
  return new Promise(function(resolve, reject) {
    fs.readFile(fpath, encoding, function(err, content) {
      if (err) {
        reject(err)
      } else {
        resolve(content)
      }
    })
  })
}

function writeFile(fpath, content) {
  return new Promise(function(resolve, reject) {
    fs.writeFile(fpath, content, function(err) {
      if (err) {
        reject(err)
      } else {
        resolve()
      }
    })
  })
}

function readdir(dir) {
  return new Promise(function(resolve, reject) {
    fs.readdir(dir, function(err, entries) {
      if (err) {
        reject(err)
      } else {
        resolve(entries)
      }
    })
  })
}


var versions = 'patch minor major prepatch preminor premajor prerelease'.split(' ')

function validVersion(version) {
  return semver.valid(version) || versions.indexOf(version) >= 0
}


function usage() {
  return fs.readFileSync(path.resolve(__dirname, '../usage.txt'), 'utf-8')
}

function quit(message) {
  console.error()
  console.error('Error:', message)
  console.error()
  console.error(usage())
  process.exit(1)
}


if (argv.help) {
  console.log(usage())
  process.exit()
}


var newVersion = argv._.pop()

if (!newVersion) {
  quit('Please specify the version you want to release.')
}

if (!validVersion(newVersion)) {
  quit('Please specify a valid version. (' + newVersion + ')')
}


/*
 * Basic process:
 *
 * npm version <new-version> -m 'Upgrade to %s' --no-git-tag-version
 * git changelog
 * git add History.md
 * git commit --amend --no-edit
 * git tag v${new-version}
 * git push origin
 * git push origin --tags
 * npm publish
 */
co(function* () {
  var pkg = JSON.parse(yield readFile('./package.json', 'utf-8'))
  var versionTag = yield run(
    util.format('npm version %s --no-git-tag-version', newVersion)
  )

  versionTag = argv.dryrun
    ? 'v' + semver.inc(pkg.version, newVersion)
    : versionTag.trim()

  var version = versionTag.slice(1)

  yield spawn('git', ['changelog', '--tag', version], { stdio: 'inherit' })
  yield run('git add package.json')

  var message = util.format(argv.message || '%s', version)
  yield run('git commit -m ' + escapeArg(message))

  yield run('git tag ' + versionTag)
  yield run('git push origin')
  yield run('git push origin --tags')

  yield spawn(process.env.NPM || 'npm', ['publish'], { stdio: 'inherit' })
})
  .catch(function(err) {
    quit(err.stack)
  })

